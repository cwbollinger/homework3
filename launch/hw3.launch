<launch>
  <arg name="base"       default="$(optenv TURTLEBOT_BASE kobuki)"/>  <!-- create, rhoomba -->
  <arg name="stacks"     default="$(optenv TURTLEBOT_STACKS hexagons)"/>  <!-- circles, hexagons -->
  <arg name="3d_sensor"  default="$(optenv TURTLEBOT_3D_SENSOR kinect)"/>  <!-- kinect, asus_xtion_pro -->

  <!-- Name of the map to use (without path nor extension) and initial position -->
  <arg name="map_file"       default=" $(env TURTLEBOT_STAGE_MAP_FILE)"/> <!-- robopark_plan -->
  <arg name="world_file"     default=" $(find hw3)/stageTutorial/tutorial.world"/>
  <arg name="initial_pose_x" default="2.0"/>
  <arg name="initial_pose_y" default="2.0"/>
  <arg name="initial_pose_a" default="0.0"/>

  <param name="/use_sim_time" value="true"/>
  <!--  ******************** Stage ********************  -->
  <!-- 
        Publishes transforms:
          /base_link -> /base_laser
          /base_footprint -> /base_link (identity)
          /odom -> base_footprint
        Publishes topics:
          /odom : odometry data from the simulated odometry
          /base_scan : laser data from the simulated laser
          /base_pose_ground_truth : the ground truth pose
        Parameters:
          base_watchdog_timeout : time (s) after receiving the last command on cmd_vel before stopping the robot
        Args:
          -g : run in headless mode.
  --> 
  <node pkg="stage_ros" type="stageros" name="stageros" args="$(arg world_file)">
    <param name="base_watchdog_timeout" value="0.5"/>
    <remap from="odom" to="odom"/>
    <remap from="base_pose_ground_truth" to="base_pose_ground_truth"/>
    <remap from="cmd_vel" to="mobile_base/commands/velocity"/>
    <remap from="base_scan" to="scan"/>
  </node>

  <!--  ***************** Robot Model *****************  -->
  <include file="$(find turtlebot_bringup)/launch/includes/robot.launch.xml">
    <arg name="base" value="$(arg base)" />
    <arg name="stacks" value="$(arg stacks)" />
    <arg name="3d_sensor" value="$(arg 3d_sensor)" />
  </include>
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
    <param name="use_gui" value="true"/>
  </node>

  <!-- Command Velocity multiplexer -->
  <node pkg="nodelet" type="nodelet" name="mobile_base_nodelet_manager" args="manager"/>
  <node pkg="nodelet" type="nodelet" name="cmd_vel_mux" args="load yocs_cmd_vel_mux/CmdVelMuxNodelet mobile_base_nodelet_manager">
    <param name="yaml_cfg_file" value="$(find turtlebot_bringup)/param/mux.yaml"/>
    <remap from="cmd_vel_mux/output" to="mobile_base/commands/velocity"/>
  </node>

  <!--  ************** Navigation  ***************  -->
  <include file="$(find turtlebot_navigation)/launch/includes/move_base.launch.xml"/>

  <!--  ****** Maps *****  -->
  <node name="map_server" pkg="map_server" type="map_server" args="$(arg map_file)">
    <param name="frame_id" value="/map"/>
  </node>

  <include file="$(find turtlebot_navigation)/launch/includes/amcl/amcl.launch.xml">
    <arg name="scan_topic" value="scan"/>
    <arg name="use_map_topic" value="true"/>
    <arg name="initial_pose_x" value="$(arg initial_pose_x)"/>
    <arg name="initial_pose_y" value="$(arg initial_pose_y)"/>
    <arg name="initial_pose_a" value="$(arg initial_pose_a)"/>
  </include>

  <!--  **************** Visualisation ****************  -->
  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find turtlebot_stage)/rviz/robot_navigation.rviz"/>


    <!-- Runs two nodes. For Python, make sure your scripts are executable (use the chmod command as described in the homework description). -->
    
    <node pkg="turtlebot_teleop" type="turtlebot_teleop_key" name="turtlebot_teleop_keyboard"  output="screen">
    <param name="scale_linear" value="0.5" type="double"/>
    <param name="scale_angular" value="1.5" type="double"/>
    <remap from="turtlebot_teleop_keyboard/cmd_vel" to="my_vel"/>
    </node>

    <node pkg="hw3" name="drive1" type="drive.py" output="screen">
        <remap from="teleop" to="cmd_vel_mux/input/teleop"/>
    </node>
    
    <node pkg="hw3" name="listen2" type="listen.py"/>


    <!--Run the opencv Hough circle node.-->

  <arg name="opencv_apps" default="hough_circles" />

  <arg name="image" default="mikecircles/image" />

  <arg name="use_camera_info" default="false" doc="Indicates that the camera_info topic should be subscribed to to get the default input_frame_id. Otherwise the frame from the image message will be used." />
  <arg name="debug_view" default="true" doc="Specify whether the node displays a window to show edge image" />

  <arg name="canny_threshold" default="48" doc="Upper threshold for the internal Canny edge detector." />
  <arg name="accumulator_threshold" default="46" doc="Threshold for center detection." />
  <arg name="gaussian_blur_size" default="5" doc="The size of gaussian blur (should be odd number)" />
  <arg name="gaussian_sigma_x" default="2" doc="Sigma x of gaussian kernel" />
  <arg name="gaussian_sigma_y" default="2" doc="Sigma y of gaussian kernel" />
  <arg name="dp" default="2" doc="The inverse ratio of resolution." />
  <arg name="min_circle_radius" default="9" doc="The minimum size of the circle, If unknown, put zero as default" />
  <arg name="max_circle_radius" default="30" doc="The maximum size of the circle, If unknown, put zero as default." />

  <!-- hough_circles.cpp -->
  <node name="mikecircles" pkg="opencv_apps" type="hough_circles">
    <remap from="image" to="$(arg image)" />
    <param name="use_camera_info" value="$(arg use_camera_info)" />
    <param name="debug_view" value="$(arg debug_view)" />
    <param name="canny_threshold" value="$(arg canny_threshold)" />
    <param name="accumulator_threshold" value="$(arg accumulator_threshold)" />
    <param name="gaussian_blur_size" value="$(arg gaussian_blur_size)" />
    <param name="gaussian_sigma_x" value="$(arg gaussian_sigma_x)" />
    <param name="gaussian_sigma_y" value="$(arg gaussian_sigma_y)" />
    <param name="dp" value="$(arg dp)" />
    <param name="min_circle_radius" value="$(arg min_circle_radius)" />
    <param name="max_circle_radius" value="$(arg max_circle_radius)" />
  </node>

</launch>



